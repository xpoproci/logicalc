//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Logic.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="LogicParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public interface ILogicListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] LogicParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] LogicParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtom([NotNull] LogicParser.AtomContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtom([NotNull] LogicParser.AtomContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.propositionalWff"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropositionalWff([NotNull] LogicParser.PropositionalWffContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.propositionalWff"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropositionalWff([NotNull] LogicParser.PropositionalWffContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.propWff"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropWff([NotNull] LogicParser.PropWffContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.propWff"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropWff([NotNull] LogicParser.PropWffContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.propNegRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropNegRule([NotNull] LogicParser.PropNegRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.propNegRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropNegRule([NotNull] LogicParser.PropNegRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.propAndRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropAndRule([NotNull] LogicParser.PropAndRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.propAndRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropAndRule([NotNull] LogicParser.PropAndRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.propOrRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropOrRule([NotNull] LogicParser.PropOrRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.propOrRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropOrRule([NotNull] LogicParser.PropOrRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.propImpRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropImpRule([NotNull] LogicParser.PropImpRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.propImpRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropImpRule([NotNull] LogicParser.PropImpRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.propBicondRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropBicondRule([NotNull] LogicParser.PropBicondRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.propBicondRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropBicondRule([NotNull] LogicParser.PropBicondRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.propExclusiveOrRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropExclusiveOrRule([NotNull] LogicParser.PropExclusiveOrRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.propExclusiveOrRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropExclusiveOrRule([NotNull] LogicParser.PropExclusiveOrRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstant([NotNull] LogicParser.ConstantContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstant([NotNull] LogicParser.ConstantContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable([NotNull] LogicParser.VariableContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable([NotNull] LogicParser.VariableContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.universal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUniversal([NotNull] LogicParser.UniversalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.universal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUniversal([NotNull] LogicParser.UniversalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.existential"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExistential([NotNull] LogicParser.ExistentialContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.existential"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExistential([NotNull] LogicParser.ExistentialContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredicate([NotNull] LogicParser.PredicateContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredicate([NotNull] LogicParser.PredicateContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.predicateWff"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredicateWff([NotNull] LogicParser.PredicateWffContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.predicateWff"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredicateWff([NotNull] LogicParser.PredicateWffContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.predWff"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredWff([NotNull] LogicParser.PredWffContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.predWff"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredWff([NotNull] LogicParser.PredWffContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.predQuantifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredQuantifier([NotNull] LogicParser.PredQuantifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.predQuantifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredQuantifier([NotNull] LogicParser.PredQuantifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.predNegRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredNegRule([NotNull] LogicParser.PredNegRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.predNegRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredNegRule([NotNull] LogicParser.PredNegRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.predAndRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredAndRule([NotNull] LogicParser.PredAndRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.predAndRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredAndRule([NotNull] LogicParser.PredAndRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.predOrRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredOrRule([NotNull] LogicParser.PredOrRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.predOrRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredOrRule([NotNull] LogicParser.PredOrRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.predImpRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredImpRule([NotNull] LogicParser.PredImpRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.predImpRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredImpRule([NotNull] LogicParser.PredImpRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.predBicondRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredBicondRule([NotNull] LogicParser.PredBicondRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.predBicondRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredBicondRule([NotNull] LogicParser.PredBicondRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.predExclusiveOrRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredExclusiveOrRule([NotNull] LogicParser.PredExclusiveOrRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.predExclusiveOrRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredExclusiveOrRule([NotNull] LogicParser.PredExclusiveOrRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.predIdentityRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredIdentityRule([NotNull] LogicParser.PredIdentityRuleContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.predIdentityRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredIdentityRule([NotNull] LogicParser.PredIdentityRuleContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.predPremise"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredPremise([NotNull] LogicParser.PredPremiseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.predPremise"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredPremise([NotNull] LogicParser.PredPremiseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.predConclusion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredConclusion([NotNull] LogicParser.PredConclusionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.predConclusion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredConclusion([NotNull] LogicParser.PredConclusionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.predProof"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredProof([NotNull] LogicParser.PredProofContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.predProof"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredProof([NotNull] LogicParser.PredProofContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.propPremise"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropPremise([NotNull] LogicParser.PropPremiseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.propPremise"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropPremise([NotNull] LogicParser.PropPremiseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.propConclusion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropConclusion([NotNull] LogicParser.PropConclusionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.propConclusion"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropConclusion([NotNull] LogicParser.PropConclusionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.propProof"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropProof([NotNull] LogicParser.PropProofContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.propProof"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropProof([NotNull] LogicParser.PropProofContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.predSemanticEntailment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredSemanticEntailment([NotNull] LogicParser.PredSemanticEntailmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.predSemanticEntailment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredSemanticEntailment([NotNull] LogicParser.PredSemanticEntailmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LogicParser.propSemanticEntailment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropSemanticEntailment([NotNull] LogicParser.PropSemanticEntailmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LogicParser.propSemanticEntailment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropSemanticEntailment([NotNull] LogicParser.PropSemanticEntailmentContext context);
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Logic.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class LogicLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WHITESPACE=1, COMMENT=2, OPEN_PAREN=3, CLOSE_PAREN=4, COMMA=5, SEMICOLON=6, 
		AND=7, OR=8, IMP=9, BICOND=10, NEG=11, XOR=12, IDENTITY=13, ATOM=14, CONSTANT=15, 
		VARIABLE=16, EXISTENTIAL=17, UNIVERSAL=18, THEREFORE=19, SEMANTIC_ENTAILMENT=20;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"WHITESPACE", "COMMENT", "DIGIT", "LOWER_CASE_LTR", "UPPER_CASE_LTR", 
		"ANY_CASE_LTR", "UNDERSCORE", "SINGLE_QUOTE", "DOUBLE_QUOTE", "ANYCHAR", 
		"NEWLINE", "CARRIAGE_RET", "TAB", "NULL_CHAR", "ESCAPED_CHAR", "AND_LIT", 
		"OR_LIT", "IMP_LIT", "BICOND_LIT", "NEG_LIT", "XOR_LIT", "IDENTITY_LIT", 
		"OPEN_PAREN", "CLOSE_PAREN", "COMMA", "SEMICOLON", "AND", "OR", "IMP", 
		"BICOND", "NEG", "XOR", "IDENTITY", "ATOM", "CONSTANT", "VARIABLE", "EXISTENTIAL", 
		"UNIVERSAL", "THEREFORE", "SEMANTIC_ENTAILMENT"
	};


	public LogicLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LogicLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'('", "')'", "','", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WHITESPACE", "COMMENT", "OPEN_PAREN", "CLOSE_PAREN", "COMMA", "SEMICOLON", 
		"AND", "OR", "IMP", "BICOND", "NEG", "XOR", "IDENTITY", "ATOM", "CONSTANT", 
		"VARIABLE", "EXISTENTIAL", "UNIVERSAL", "THEREFORE", "SEMANTIC_ENTAILMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Logic.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LogicLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,20,347,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,1,0,4,0,83,8,0,11,0,12,0,
		84,1,0,1,0,1,1,1,1,1,1,1,1,5,1,93,8,1,10,1,12,1,96,9,1,1,1,1,1,1,1,1,1,
		1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,
		10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,
		15,1,15,1,15,3,15,136,8,15,1,16,1,16,1,16,1,16,3,16,142,8,16,1,17,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,158,8,
		17,1,18,1,18,1,18,1,18,1,18,1,18,3,18,166,8,18,1,19,1,19,1,19,1,19,1,19,
		1,19,3,19,174,8,19,1,20,1,20,1,20,1,20,1,20,1,20,3,20,182,8,20,1,21,1,
		21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,1,21,3,21,204,8,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,
		1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,222,8,26,1,27,1,27,1,
		27,1,27,3,27,228,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
		1,28,1,28,1,28,3,28,243,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
		29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,260,8,29,1,30,1,30,1,30,1,30,1,30,
		1,30,1,30,3,30,269,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
		31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,287,8,31,1,32,1,32,3,32,291,8,32,
		1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
		1,36,1,36,3,36,309,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
		37,3,37,321,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,331,8,38,
		1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,
		346,8,39,1,94,0,40,1,1,3,2,5,0,7,0,9,0,11,0,13,0,15,0,17,0,19,0,21,0,23,
		0,25,0,27,0,29,0,31,0,33,0,35,0,37,0,39,0,41,0,43,0,45,3,47,4,49,5,51,
		6,53,7,55,8,57,9,59,10,61,11,63,12,65,13,67,14,69,15,71,16,73,17,75,18,
		77,19,79,20,1,0,10,3,0,9,10,13,13,32,32,1,0,48,57,1,0,97,122,1,0,65,90,
		2,0,65,90,97,122,2,0,38,38,8743,8743,3,0,43,43,124,124,8744,8744,4,0,126,
		126,172,172,8764,8764,65374,65374,1,0,97,116,1,0,117,122,369,0,1,1,0,0,
		0,0,3,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
		1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
		0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
		1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,1,82,1,0,0,0,3,88,1,0,0,0,5,101,1,0,
		0,0,7,103,1,0,0,0,9,105,1,0,0,0,11,107,1,0,0,0,13,109,1,0,0,0,15,111,1,
		0,0,0,17,113,1,0,0,0,19,115,1,0,0,0,21,117,1,0,0,0,23,119,1,0,0,0,25,121,
		1,0,0,0,27,123,1,0,0,0,29,126,1,0,0,0,31,135,1,0,0,0,33,141,1,0,0,0,35,
		157,1,0,0,0,37,165,1,0,0,0,39,173,1,0,0,0,41,181,1,0,0,0,43,203,1,0,0,
		0,45,205,1,0,0,0,47,207,1,0,0,0,49,209,1,0,0,0,51,211,1,0,0,0,53,221,1,
		0,0,0,55,227,1,0,0,0,57,242,1,0,0,0,59,259,1,0,0,0,61,268,1,0,0,0,63,286,
		1,0,0,0,65,290,1,0,0,0,67,292,1,0,0,0,69,294,1,0,0,0,71,296,1,0,0,0,73,
		308,1,0,0,0,75,320,1,0,0,0,77,330,1,0,0,0,79,345,1,0,0,0,81,83,7,0,0,0,
		82,81,1,0,0,0,83,84,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,86,1,0,0,0,
		86,87,6,0,0,0,87,2,1,0,0,0,88,89,5,47,0,0,89,90,5,47,0,0,90,94,1,0,0,0,
		91,93,9,0,0,0,92,91,1,0,0,0,93,96,1,0,0,0,94,95,1,0,0,0,94,92,1,0,0,0,
		95,97,1,0,0,0,96,94,1,0,0,0,97,98,3,21,10,0,98,99,1,0,0,0,99,100,6,1,0,
		0,100,4,1,0,0,0,101,102,7,1,0,0,102,6,1,0,0,0,103,104,7,2,0,0,104,8,1,
		0,0,0,105,106,7,3,0,0,106,10,1,0,0,0,107,108,7,4,0,0,108,12,1,0,0,0,109,
		110,5,95,0,0,110,14,1,0,0,0,111,112,5,39,0,0,112,16,1,0,0,0,113,114,5,
		34,0,0,114,18,1,0,0,0,115,116,9,0,0,0,116,20,1,0,0,0,117,118,5,10,0,0,
		118,22,1,0,0,0,119,120,5,13,0,0,120,24,1,0,0,0,121,122,5,9,0,0,122,26,
		1,0,0,0,123,124,5,92,0,0,124,125,5,48,0,0,125,28,1,0,0,0,126,127,5,92,
		0,0,127,128,9,0,0,0,128,30,1,0,0,0,129,130,5,65,0,0,130,131,5,78,0,0,131,
		136,5,68,0,0,132,133,5,97,0,0,133,134,5,110,0,0,134,136,5,100,0,0,135,
		129,1,0,0,0,135,132,1,0,0,0,136,32,1,0,0,0,137,138,5,79,0,0,138,142,5,
		82,0,0,139,140,5,111,0,0,140,142,5,114,0,0,141,137,1,0,0,0,141,139,1,0,
		0,0,142,34,1,0,0,0,143,144,5,73,0,0,144,145,5,77,0,0,145,146,5,80,0,0,
		146,147,5,76,0,0,147,148,5,73,0,0,148,149,5,69,0,0,149,158,5,83,0,0,150,
		151,5,105,0,0,151,152,5,109,0,0,152,153,5,112,0,0,153,154,5,108,0,0,154,
		155,5,105,0,0,155,156,5,101,0,0,156,158,5,115,0,0,157,143,1,0,0,0,157,
		150,1,0,0,0,158,36,1,0,0,0,159,160,5,73,0,0,160,161,5,70,0,0,161,166,5,
		70,0,0,162,163,5,105,0,0,163,164,5,102,0,0,164,166,5,102,0,0,165,159,1,
		0,0,0,165,162,1,0,0,0,166,38,1,0,0,0,167,168,5,78,0,0,168,169,5,79,0,0,
		169,174,5,84,0,0,170,171,5,110,0,0,171,172,5,111,0,0,172,174,5,116,0,0,
		173,167,1,0,0,0,173,170,1,0,0,0,174,40,1,0,0,0,175,176,5,88,0,0,176,177,
		5,79,0,0,177,182,5,82,0,0,178,179,5,120,0,0,179,180,5,111,0,0,180,182,
		5,114,0,0,181,175,1,0,0,0,181,178,1,0,0,0,182,42,1,0,0,0,183,184,5,69,
		0,0,184,185,5,81,0,0,185,186,5,85,0,0,186,187,5,73,0,0,187,188,5,86,0,
		0,188,189,5,65,0,0,189,190,5,76,0,0,190,191,5,69,0,0,191,192,5,78,0,0,
		192,204,5,84,0,0,193,194,5,101,0,0,194,195,5,113,0,0,195,196,5,117,0,0,
		196,197,5,105,0,0,197,198,5,118,0,0,198,199,5,97,0,0,199,200,5,108,0,0,
		200,201,5,101,0,0,201,202,5,110,0,0,202,204,5,116,0,0,203,183,1,0,0,0,
		203,193,1,0,0,0,204,44,1,0,0,0,205,206,5,40,0,0,206,46,1,0,0,0,207,208,
		5,41,0,0,208,48,1,0,0,0,209,210,5,44,0,0,210,50,1,0,0,0,211,212,5,59,0,
		0,212,52,1,0,0,0,213,222,7,5,0,0,214,215,5,226,0,0,215,216,5,65533,0,0,
		216,222,5,167,0,0,217,222,5,94,0,0,218,219,5,194,0,0,219,222,5,183,0,0,
		220,222,3,31,15,0,221,213,1,0,0,0,221,214,1,0,0,0,221,217,1,0,0,0,221,
		218,1,0,0,0,221,220,1,0,0,0,222,54,1,0,0,0,223,228,7,6,0,0,224,225,5,124,
		0,0,225,228,5,124,0,0,226,228,3,33,16,0,227,223,1,0,0,0,227,224,1,0,0,
		0,227,226,1,0,0,0,228,56,1,0,0,0,229,230,5,45,0,0,230,243,5,62,0,0,231,
		232,5,226,0,0,232,233,5,8224,0,0,233,243,5,8217,0,0,234,235,5,226,0,0,
		235,236,5,8225,0,0,236,243,5,8217,0,0,237,238,5,226,0,0,238,239,5,352,
		0,0,239,243,5,65533,0,0,240,243,5,62,0,0,241,243,3,35,17,0,242,229,1,0,
		0,0,242,231,1,0,0,0,242,234,1,0,0,0,242,237,1,0,0,0,242,240,1,0,0,0,242,
		241,1,0,0,0,243,58,1,0,0,0,244,245,5,60,0,0,245,246,5,45,0,0,246,260,5,
		62,0,0,247,248,5,226,0,0,248,249,5,8225,0,0,249,260,5,8221,0,0,250,251,
		5,226,0,0,251,252,5,8240,0,0,252,260,5,711,0,0,253,254,5,226,0,0,254,255,
		5,8224,0,0,255,260,5,8221,0,0,256,257,5,60,0,0,257,260,5,62,0,0,258,260,
		3,37,18,0,259,244,1,0,0,0,259,247,1,0,0,0,259,250,1,0,0,0,259,253,1,0,
		0,0,259,256,1,0,0,0,259,258,1,0,0,0,260,60,1,0,0,0,261,262,5,203,0,0,262,
		269,5,347,0,0,263,269,7,7,0,0,264,265,5,194,0,0,265,269,5,172,0,0,266,
		269,5,33,0,0,267,269,3,39,19,0,268,261,1,0,0,0,268,263,1,0,0,0,268,264,
		1,0,0,0,268,266,1,0,0,0,268,267,1,0,0,0,269,62,1,0,0,0,270,271,5,226,0,
		0,271,272,5,352,0,0,272,287,5,8226,0,0,273,274,5,226,0,0,274,275,5,352,
		0,0,275,287,5,187,0,0,276,277,5,226,0,0,277,278,5,8240,0,0,278,287,5,728,
		0,0,279,280,5,226,0,0,280,281,5,169,0,0,281,287,5,8217,0,0,282,283,5,226,
		0,0,283,284,5,8224,0,0,284,287,5,174,0,0,285,287,3,41,20,0,286,270,1,0,
		0,0,286,273,1,0,0,0,286,276,1,0,0,0,286,279,1,0,0,0,286,282,1,0,0,0,286,
		285,1,0,0,0,287,64,1,0,0,0,288,291,5,61,0,0,289,291,3,43,21,0,290,288,
		1,0,0,0,290,289,1,0,0,0,291,66,1,0,0,0,292,293,3,9,4,0,293,68,1,0,0,0,
		294,295,7,8,0,0,295,70,1,0,0,0,296,297,7,9,0,0,297,72,1,0,0,0,298,299,
		5,226,0,0,299,300,5,65533,0,0,300,309,5,65533,0,0,301,309,5,8707,0,0,302,
		303,5,101,0,0,303,304,5,120,0,0,304,305,5,105,0,0,305,306,5,115,0,0,306,
		307,5,116,0,0,307,309,5,115,0,0,308,298,1,0,0,0,308,301,1,0,0,0,308,302,
		1,0,0,0,309,74,1,0,0,0,310,311,5,226,0,0,311,312,5,65533,0,0,312,321,5,
		8364,0,0,313,321,5,8704,0,0,314,315,5,102,0,0,315,316,5,111,0,0,316,317,
		5,114,0,0,317,318,5,97,0,0,318,319,5,108,0,0,319,321,5,108,0,0,320,310,
		1,0,0,0,320,313,1,0,0,0,320,314,1,0,0,0,321,76,1,0,0,0,322,323,5,226,0,
		0,323,324,5,352,0,0,324,331,5,728,0,0,325,326,5,226,0,0,326,327,5,65533,
		0,0,327,331,5,180,0,0,328,329,5,61,0,0,329,331,5,62,0,0,330,322,1,0,0,
		0,330,325,1,0,0,0,330,328,1,0,0,0,331,78,1,0,0,0,332,333,5,226,0,0,333,
		334,5,352,0,0,334,346,5,167,0,0,335,336,5,226,0,0,336,337,5,352,0,0,337,
		346,5,168,0,0,338,339,5,101,0,0,339,340,5,110,0,0,340,341,5,116,0,0,341,
		342,5,97,0,0,342,343,5,105,0,0,343,344,5,108,0,0,344,346,5,115,0,0,345,
		332,1,0,0,0,345,335,1,0,0,0,345,338,1,0,0,0,346,80,1,0,0,0,21,0,84,94,
		135,141,157,165,173,181,203,221,227,242,259,268,286,290,308,320,330,345,
		1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

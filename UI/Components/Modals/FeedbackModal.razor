@inject NavigationManager uriHelper;
@inject FeedbackFacade facade;

<div class="modal-margin-wrapper">
    <BaseModal Id="feedback-modal" @ref="baseModal" Title="Spätná väzba">
        @foreach (var q in model.Questions)
        {
            <p class="font-bold text-slate-700 dark:text-slate-400">@q.Text</p>
            <div class="flex gap-4 flex-row w-full justify-center w-full mb-2 border-b border-slate-300 dark:border-slate-700 pt-2 pb-3">
                <span class="text-slate-600 dark:text-slate-300">Veľmi negatívne</span>
                @for (var i = 1; i <= 5; i++)
                {
                    var val = i;
                    <input type="radio" class="radio" name="@q.Id" value="@i" @onchange="() => q.Value = val" />
                }
                <span class="text-slate-600 dark:text-slate-300">Veľmi pozitívne</span>
            </div>
        }

        <p class="font-bold text-slate-700 dark:text-slate-400">Návrh na vylepšenie aplikácie (nepovinné)</p>
        <div class="search-box">
            <textarea type="text" @bind="model.Improvement" placeholder="Vylepšili by ste niečo?" class="fillable-text-field" />
        </div>

        <p class="font-bold text-slate-700 dark:text-slate-400">Našli ste chybu? (nepovinné)</p>
        <div class="search-box">
            <textarea type="text" @bind="model.Bug" placeholder="Popíšte chybu v prípade, že ste na nejakú narazili." class="fillable-text-field" />
        </div>
        @if (!valid)
        {
            <div class="rounded-xl error w-full py-2 text-center">@ErrMessage</div>
        }
        <div class="flex gap-4 flex-row w-full justify-center w-full">
            <a @onclick="Submit" class="button-outline w-full-important">Odoslať</a>
        </div>
    </BaseModal>
</div>        

@code {
    private FeedbackDto model = new();

    private bool valid = true;
    private string ErrMessage = string.Empty;

    private BaseModal? baseModal;

    protected override async Task OnInitializedAsync()
    {
        model = await facade.GetQuestionsAsync();
    }

    private async Task Submit()
    {
        foreach(var i in model.Questions)
        {
            if(i.Value == 0)
            {
                i.Value = 3;
            }
        }

        await facade.PostFeedbackAsync(model);

        uriHelper.NavigateTo("/", forceLoad: true);        
        StateHasChanged();
    }

    public void Open()
    {
        baseModal?.Open();
    }
}